{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "96346a04",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-09-03T20:10:52.680834Z",
     "iopub.status.busy": "2024-09-03T20:10:52.680188Z",
     "iopub.status.idle": "2024-09-03T20:11:10.378297Z",
     "shell.execute_reply": "2024-09-03T20:11:10.377010Z"
    },
    "papermill": {
     "duration": 17.712602,
     "end_time": "2024-09-03T20:11:10.381600",
     "exception": false,
     "start_time": "2024-09-03T20:10:52.668998",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/weather-type-classification/weather_classification_data.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "import tensorflow\n",
    "from tensorflow import keras\n",
    "from keras import Sequential\n",
    "from keras.layers import Dense,Flatten,Input,Dropout\n",
    "from keras.utils import to_categorical\n",
    "from sklearn.preprocessing import LabelEncoder, MinMaxScaler\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3e9adb42",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-03T20:11:10.400029Z",
     "iopub.status.busy": "2024-09-03T20:11:10.399272Z",
     "iopub.status.idle": "2024-09-03T20:11:10.461726Z",
     "shell.execute_reply": "2024-09-03T20:11:10.460417Z"
    },
    "papermill": {
     "duration": 0.074665,
     "end_time": "2024-09-03T20:11:10.464596",
     "exception": false,
     "start_time": "2024-09-03T20:11:10.389931",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df=pd.read_csv(\"/kaggle/input/weather-type-classification/weather_classification_data.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b38de320",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-03T20:11:10.482397Z",
     "iopub.status.busy": "2024-09-03T20:11:10.481958Z",
     "iopub.status.idle": "2024-09-03T20:11:10.522181Z",
     "shell.execute_reply": "2024-09-03T20:11:10.520584Z"
    },
    "papermill": {
     "duration": 0.052336,
     "end_time": "2024-09-03T20:11:10.525059",
     "exception": false,
     "start_time": "2024-09-03T20:11:10.472723",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 13200 entries, 0 to 13199\n",
      "Data columns (total 11 columns):\n",
      " #   Column                Non-Null Count  Dtype  \n",
      "---  ------                --------------  -----  \n",
      " 0   Temperature           13200 non-null  float64\n",
      " 1   Humidity              13200 non-null  int64  \n",
      " 2   Wind Speed            13200 non-null  float64\n",
      " 3   Precipitation (%)     13200 non-null  float64\n",
      " 4   Cloud Cover           13200 non-null  object \n",
      " 5   Atmospheric Pressure  13200 non-null  float64\n",
      " 6   UV Index              13200 non-null  int64  \n",
      " 7   Season                13200 non-null  object \n",
      " 8   Visibility (km)       13200 non-null  float64\n",
      " 9   Location              13200 non-null  object \n",
      " 10  Weather Type          13200 non-null  object \n",
      "dtypes: float64(5), int64(2), object(4)\n",
      "memory usage: 1.1+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5221b78d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-03T20:11:10.542864Z",
     "iopub.status.busy": "2024-09-03T20:11:10.542431Z",
     "iopub.status.idle": "2024-09-03T20:11:10.569780Z",
     "shell.execute_reply": "2024-09-03T20:11:10.568604Z"
    },
    "papermill": {
     "duration": 0.039751,
     "end_time": "2024-09-03T20:11:10.572729",
     "exception": false,
     "start_time": "2024-09-03T20:11:10.532978",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Temperature</th>\n",
       "      <th>Humidity</th>\n",
       "      <th>Wind Speed</th>\n",
       "      <th>Precipitation (%)</th>\n",
       "      <th>Cloud Cover</th>\n",
       "      <th>Atmospheric Pressure</th>\n",
       "      <th>UV Index</th>\n",
       "      <th>Season</th>\n",
       "      <th>Visibility (km)</th>\n",
       "      <th>Location</th>\n",
       "      <th>Weather Type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>14.0</td>\n",
       "      <td>73</td>\n",
       "      <td>9.5</td>\n",
       "      <td>82.0</td>\n",
       "      <td>partly cloudy</td>\n",
       "      <td>1010.82</td>\n",
       "      <td>2</td>\n",
       "      <td>Winter</td>\n",
       "      <td>3.5</td>\n",
       "      <td>inland</td>\n",
       "      <td>Rainy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>39.0</td>\n",
       "      <td>96</td>\n",
       "      <td>8.5</td>\n",
       "      <td>71.0</td>\n",
       "      <td>partly cloudy</td>\n",
       "      <td>1011.43</td>\n",
       "      <td>7</td>\n",
       "      <td>Spring</td>\n",
       "      <td>10.0</td>\n",
       "      <td>inland</td>\n",
       "      <td>Cloudy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>30.0</td>\n",
       "      <td>64</td>\n",
       "      <td>7.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>clear</td>\n",
       "      <td>1018.72</td>\n",
       "      <td>5</td>\n",
       "      <td>Spring</td>\n",
       "      <td>5.5</td>\n",
       "      <td>mountain</td>\n",
       "      <td>Sunny</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>38.0</td>\n",
       "      <td>83</td>\n",
       "      <td>1.5</td>\n",
       "      <td>82.0</td>\n",
       "      <td>clear</td>\n",
       "      <td>1026.25</td>\n",
       "      <td>7</td>\n",
       "      <td>Spring</td>\n",
       "      <td>1.0</td>\n",
       "      <td>coastal</td>\n",
       "      <td>Sunny</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>27.0</td>\n",
       "      <td>74</td>\n",
       "      <td>17.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>overcast</td>\n",
       "      <td>990.67</td>\n",
       "      <td>1</td>\n",
       "      <td>Winter</td>\n",
       "      <td>2.5</td>\n",
       "      <td>mountain</td>\n",
       "      <td>Rainy</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Temperature  Humidity  Wind Speed  Precipitation (%)    Cloud Cover  \\\n",
       "0         14.0        73         9.5               82.0  partly cloudy   \n",
       "1         39.0        96         8.5               71.0  partly cloudy   \n",
       "2         30.0        64         7.0               16.0          clear   \n",
       "3         38.0        83         1.5               82.0          clear   \n",
       "4         27.0        74        17.0               66.0       overcast   \n",
       "\n",
       "   Atmospheric Pressure  UV Index  Season  Visibility (km)  Location  \\\n",
       "0               1010.82         2  Winter              3.5    inland   \n",
       "1               1011.43         7  Spring             10.0    inland   \n",
       "2               1018.72         5  Spring              5.5  mountain   \n",
       "3               1026.25         7  Spring              1.0   coastal   \n",
       "4                990.67         1  Winter              2.5  mountain   \n",
       "\n",
       "  Weather Type  \n",
       "0        Rainy  \n",
       "1       Cloudy  \n",
       "2        Sunny  \n",
       "3        Sunny  \n",
       "4        Rainy  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "07914dd1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-03T20:11:10.591183Z",
     "iopub.status.busy": "2024-09-03T20:11:10.590727Z",
     "iopub.status.idle": "2024-09-03T20:11:10.602601Z",
     "shell.execute_reply": "2024-09-03T20:11:10.601445Z"
    },
    "papermill": {
     "duration": 0.024017,
     "end_time": "2024-09-03T20:11:10.605117",
     "exception": false,
     "start_time": "2024-09-03T20:11:10.581100",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['inland' 'mountain' 'coastal']\n",
      "['partly cloudy' 'clear' 'overcast' 'cloudy']\n",
      "['Winter' 'Spring' 'Summer' 'Autumn']\n"
     ]
    }
   ],
   "source": [
    "print(df['Location'].unique())\n",
    "print(df['Cloud Cover'].unique())\n",
    "print(df['Season'].unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c5fd0a47",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-03T20:11:10.624343Z",
     "iopub.status.busy": "2024-09-03T20:11:10.623825Z",
     "iopub.status.idle": "2024-09-03T20:11:10.646188Z",
     "shell.execute_reply": "2024-09-03T20:11:10.644900Z"
    },
    "papermill": {
     "duration": 0.035794,
     "end_time": "2024-09-03T20:11:10.649501",
     "exception": false,
     "start_time": "2024-09-03T20:11:10.613707",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df=pd.get_dummies(df,columns=['Location','Cloud Cover','Season'],drop_first=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "72c45770",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-03T20:11:10.669129Z",
     "iopub.status.busy": "2024-09-03T20:11:10.668642Z",
     "iopub.status.idle": "2024-09-03T20:11:10.676846Z",
     "shell.execute_reply": "2024-09-03T20:11:10.675692Z"
    },
    "papermill": {
     "duration": 0.021166,
     "end_time": "2024-09-03T20:11:10.679455",
     "exception": false,
     "start_time": "2024-09-03T20:11:10.658289",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "col=list(df.columns)\n",
    "col.remove('Weather Type')\n",
    "X=df[col]\n",
    "y=df['Weather Type']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "46316bf4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-03T20:11:10.699336Z",
     "iopub.status.busy": "2024-09-03T20:11:10.698475Z",
     "iopub.status.idle": "2024-09-03T20:11:10.722233Z",
     "shell.execute_reply": "2024-09-03T20:11:10.720982Z"
    },
    "papermill": {
     "duration": 0.037062,
     "end_time": "2024-09-03T20:11:10.725246",
     "exception": false,
     "start_time": "2024-09-03T20:11:10.688184",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Temperature</th>\n",
       "      <th>Humidity</th>\n",
       "      <th>Wind Speed</th>\n",
       "      <th>Precipitation (%)</th>\n",
       "      <th>Atmospheric Pressure</th>\n",
       "      <th>UV Index</th>\n",
       "      <th>Visibility (km)</th>\n",
       "      <th>Location_inland</th>\n",
       "      <th>Location_mountain</th>\n",
       "      <th>Cloud Cover_cloudy</th>\n",
       "      <th>Cloud Cover_overcast</th>\n",
       "      <th>Cloud Cover_partly cloudy</th>\n",
       "      <th>Season_Spring</th>\n",
       "      <th>Season_Summer</th>\n",
       "      <th>Season_Winter</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>14</td>\n",
       "      <td>73</td>\n",
       "      <td>9</td>\n",
       "      <td>82</td>\n",
       "      <td>1010</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>39</td>\n",
       "      <td>96</td>\n",
       "      <td>8</td>\n",
       "      <td>71</td>\n",
       "      <td>1011</td>\n",
       "      <td>7</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>30</td>\n",
       "      <td>64</td>\n",
       "      <td>7</td>\n",
       "      <td>16</td>\n",
       "      <td>1018</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>38</td>\n",
       "      <td>83</td>\n",
       "      <td>1</td>\n",
       "      <td>82</td>\n",
       "      <td>1026</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>27</td>\n",
       "      <td>74</td>\n",
       "      <td>17</td>\n",
       "      <td>66</td>\n",
       "      <td>990</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13195</th>\n",
       "      <td>10</td>\n",
       "      <td>74</td>\n",
       "      <td>14</td>\n",
       "      <td>71</td>\n",
       "      <td>1003</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13196</th>\n",
       "      <td>-1</td>\n",
       "      <td>76</td>\n",
       "      <td>3</td>\n",
       "      <td>23</td>\n",
       "      <td>1067</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13197</th>\n",
       "      <td>30</td>\n",
       "      <td>77</td>\n",
       "      <td>5</td>\n",
       "      <td>28</td>\n",
       "      <td>1012</td>\n",
       "      <td>3</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13198</th>\n",
       "      <td>3</td>\n",
       "      <td>76</td>\n",
       "      <td>10</td>\n",
       "      <td>94</td>\n",
       "      <td>984</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13199</th>\n",
       "      <td>-5</td>\n",
       "      <td>38</td>\n",
       "      <td>0</td>\n",
       "      <td>92</td>\n",
       "      <td>1015</td>\n",
       "      <td>5</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>13200 rows × 15 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Temperature  Humidity  Wind Speed  Precipitation (%)  \\\n",
       "0               14        73           9                 82   \n",
       "1               39        96           8                 71   \n",
       "2               30        64           7                 16   \n",
       "3               38        83           1                 82   \n",
       "4               27        74          17                 66   \n",
       "...            ...       ...         ...                ...   \n",
       "13195           10        74          14                 71   \n",
       "13196           -1        76           3                 23   \n",
       "13197           30        77           5                 28   \n",
       "13198            3        76          10                 94   \n",
       "13199           -5        38           0                 92   \n",
       "\n",
       "       Atmospheric Pressure  UV Index  Visibility (km)  Location_inland  \\\n",
       "0                      1010         2                3                1   \n",
       "1                      1011         7               10                1   \n",
       "2                      1018         5                5                0   \n",
       "3                      1026         7                1                0   \n",
       "4                       990         1                2                0   \n",
       "...                     ...       ...              ...              ...   \n",
       "13195                  1003         1                1                0   \n",
       "13196                  1067         1                6                0   \n",
       "13197                  1012         3                9                0   \n",
       "13198                   984         0                2                1   \n",
       "13199                  1015         5               10                0   \n",
       "\n",
       "       Location_mountain  Cloud Cover_cloudy  Cloud Cover_overcast  \\\n",
       "0                      0                   0                     0   \n",
       "1                      0                   0                     0   \n",
       "2                      1                   0                     0   \n",
       "3                      0                   0                     0   \n",
       "4                      1                   0                     1   \n",
       "...                  ...                 ...                   ...   \n",
       "13195                  1                   0                     1   \n",
       "13196                  0                   1                     0   \n",
       "13197                  0                   0                     1   \n",
       "13198                  0                   0                     1   \n",
       "13199                  1                   0                     1   \n",
       "\n",
       "       Cloud Cover_partly cloudy  Season_Spring  Season_Summer  Season_Winter  \n",
       "0                              1              0              0              1  \n",
       "1                              1              1              0              0  \n",
       "2                              0              1              0              0  \n",
       "3                              0              1              0              0  \n",
       "4                              0              0              0              1  \n",
       "...                          ...            ...            ...            ...  \n",
       "13195                          0              0              1              0  \n",
       "13196                          0              0              0              1  \n",
       "13197                          0              0              0              0  \n",
       "13198                          0              0              0              1  \n",
       "13199                          0              0              0              0  \n",
       "\n",
       "[13200 rows x 15 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.head()\n",
    "X.astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "573f2ccb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-03T20:11:10.746321Z",
     "iopub.status.busy": "2024-09-03T20:11:10.745789Z",
     "iopub.status.idle": "2024-09-03T20:11:10.753447Z",
     "shell.execute_reply": "2024-09-03T20:11:10.752121Z"
    },
    "papermill": {
     "duration": 0.021519,
     "end_time": "2024-09-03T20:11:10.756204",
     "exception": false,
     "start_time": "2024-09-03T20:11:10.734685",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(13200,)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ce49c8f9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-03T20:11:10.777052Z",
     "iopub.status.busy": "2024-09-03T20:11:10.776578Z",
     "iopub.status.idle": "2024-09-03T20:11:10.786370Z",
     "shell.execute_reply": "2024-09-03T20:11:10.785094Z"
    },
    "papermill": {
     "duration": 0.023307,
     "end_time": "2024-09-03T20:11:10.788863",
     "exception": false,
     "start_time": "2024-09-03T20:11:10.765556",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Rainy', 'Cloudy', 'Sunny', 'Snowy'], dtype=object)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "cb69ad9a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-03T20:11:10.811074Z",
     "iopub.status.busy": "2024-09-03T20:11:10.809995Z",
     "iopub.status.idle": "2024-09-03T20:11:10.852983Z",
     "shell.execute_reply": "2024-09-03T20:11:10.851726Z"
    },
    "papermill": {
     "duration": 0.057491,
     "end_time": "2024-09-03T20:11:10.856067",
     "exception": false,
     "start_time": "2024-09-03T20:11:10.798576",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=1)\n",
    "scaler=MinMaxScaler()\n",
    "X_train_scaled= scaler.fit_transform(X_train)\n",
    "X_test_scaled= scaler.fit_transform(X_test)\n",
    "label_encoder = LabelEncoder()\n",
    "y_train_encoded = label_encoder.fit_transform(y_train)\n",
    "y_test_encoded = label_encoder.transform(y_test)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "dd35a8b7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-03T20:11:10.877104Z",
     "iopub.status.busy": "2024-09-03T20:11:10.876593Z",
     "iopub.status.idle": "2024-09-03T20:11:10.980213Z",
     "shell.execute_reply": "2024-09-03T20:11:10.978920Z"
    },
    "papermill": {
     "duration": 0.11777,
     "end_time": "2024-09-03T20:11:10.983408",
     "exception": false,
     "start_time": "2024-09-03T20:11:10.865638",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model=Sequential()\n",
    "model.add(Input(shape=(15,)))\n",
    "model.add(Dropout(0.5))\n",
    "model.add(Dense(15,activation='relu'))\n",
    "model.add(Dense(4,activation='softmax'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "827082e5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-03T20:11:11.005495Z",
     "iopub.status.busy": "2024-09-03T20:11:11.004325Z",
     "iopub.status.idle": "2024-09-03T20:11:11.027888Z",
     "shell.execute_reply": "2024-09-03T20:11:11.026560Z"
    },
    "papermill": {
     "duration": 0.037456,
     "end_time": "2024-09-03T20:11:11.030442",
     "exception": false,
     "start_time": "2024-09-03T20:11:10.992986",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"sequential\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)             │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">15</span>)             │           <span style=\"color: #00af00; text-decoration-color: #00af00\">240</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>)              │            <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ dropout (\u001b[38;5;33mDropout\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m15\u001b[0m)             │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense (\u001b[38;5;33mDense\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m15\u001b[0m)             │           \u001b[38;5;34m240\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m4\u001b[0m)              │            \u001b[38;5;34m64\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">304</span> (1.19 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m304\u001b[0m (1.19 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">304</span> (1.19 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m304\u001b[0m (1.19 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "218ed084",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-03T20:11:11.053955Z",
     "iopub.status.busy": "2024-09-03T20:11:11.053085Z",
     "iopub.status.idle": "2024-09-03T20:11:11.071661Z",
     "shell.execute_reply": "2024-09-03T20:11:11.070585Z"
    },
    "papermill": {
     "duration": 0.033745,
     "end_time": "2024-09-03T20:11:11.074806",
     "exception": false,
     "start_time": "2024-09-03T20:11:11.041061",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model.compile(optimizer='adam',loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "f2d8e9a8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-03T20:11:11.098280Z",
     "iopub.status.busy": "2024-09-03T20:11:11.097730Z",
     "iopub.status.idle": "2024-09-03T20:12:01.998553Z",
     "shell.execute_reply": "2024-09-03T20:12:01.997251Z"
    },
    "papermill": {
     "duration": 50.916217,
     "end_time": "2024-09-03T20:12:02.001604",
     "exception": false,
     "start_time": "2024-09-03T20:11:11.085387",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 2ms/step - accuracy: 0.2365 - loss: 103.5207 - val_accuracy: 0.5071 - val_loss: 3.2079\n",
      "Epoch 2/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.3744 - loss: 3.2532 - val_accuracy: 0.7102 - val_loss: 0.8060\n",
      "Epoch 3/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.4495 - loss: 1.8520 - val_accuracy: 0.7230 - val_loss: 0.7814\n",
      "Epoch 4/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.4497 - loss: 1.6920 - val_accuracy: 0.4777 - val_loss: 1.0873\n",
      "Epoch 5/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.4590 - loss: 1.5927 - val_accuracy: 0.7770 - val_loss: 0.7405\n",
      "Epoch 6/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.4838 - loss: 1.3500 - val_accuracy: 0.7102 - val_loss: 0.8042\n",
      "Epoch 7/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5027 - loss: 1.3583 - val_accuracy: 0.6259 - val_loss: 0.8958\n",
      "Epoch 8/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.4847 - loss: 1.4327 - val_accuracy: 0.6974 - val_loss: 0.8188\n",
      "Epoch 9/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.4921 - loss: 1.3784 - val_accuracy: 0.4650 - val_loss: 1.0852\n",
      "Epoch 10/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5066 - loss: 1.3165 - val_accuracy: 0.7666 - val_loss: 0.7769\n",
      "Epoch 11/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.4924 - loss: 1.3634 - val_accuracy: 0.5445 - val_loss: 0.8635\n",
      "Epoch 12/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.5042 - loss: 1.3521 - val_accuracy: 0.7476 - val_loss: 0.8252\n",
      "Epoch 13/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.5336 - loss: 1.2988 - val_accuracy: 0.4877 - val_loss: 0.9328\n",
      "Epoch 14/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5208 - loss: 1.2690 - val_accuracy: 0.6676 - val_loss: 0.8056\n",
      "Epoch 15/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5065 - loss: 1.3565 - val_accuracy: 0.6776 - val_loss: 0.7317\n",
      "Epoch 16/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5129 - loss: 1.2909 - val_accuracy: 0.6922 - val_loss: 0.7340\n",
      "Epoch 17/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5159 - loss: 1.2410 - val_accuracy: 0.7292 - val_loss: 0.7524\n",
      "Epoch 18/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5051 - loss: 1.3856 - val_accuracy: 0.7197 - val_loss: 0.8022\n",
      "Epoch 19/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5164 - loss: 1.2858 - val_accuracy: 0.7860 - val_loss: 0.7571\n",
      "Epoch 20/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5228 - loss: 1.2592 - val_accuracy: 0.6880 - val_loss: 0.7953\n",
      "Epoch 21/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5185 - loss: 1.3975 - val_accuracy: 0.5634 - val_loss: 1.0632\n",
      "Epoch 22/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5548 - loss: 1.1848 - val_accuracy: 0.5327 - val_loss: 0.9928\n",
      "Epoch 23/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5257 - loss: 1.3146 - val_accuracy: 0.7008 - val_loss: 0.7824\n",
      "Epoch 24/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5367 - loss: 1.4600 - val_accuracy: 0.7637 - val_loss: 0.7593\n",
      "Epoch 25/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5388 - loss: 1.2441 - val_accuracy: 0.7973 - val_loss: 0.7173\n",
      "Epoch 26/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5278 - loss: 1.3516 - val_accuracy: 0.8130 - val_loss: 0.7138\n",
      "Epoch 27/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.5374 - loss: 1.2817 - val_accuracy: 0.5767 - val_loss: 0.8513\n",
      "Epoch 28/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5250 - loss: 1.3011 - val_accuracy: 0.6127 - val_loss: 0.9230\n",
      "Epoch 29/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5445 - loss: 1.2471 - val_accuracy: 0.5616 - val_loss: 0.9257\n",
      "Epoch 30/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5381 - loss: 1.2169 - val_accuracy: 0.7273 - val_loss: 0.7492\n",
      "Epoch 31/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.5368 - loss: 1.2788 - val_accuracy: 0.6345 - val_loss: 0.8656\n",
      "Epoch 32/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.5301 - loss: 1.3142 - val_accuracy: 0.8149 - val_loss: 0.7102\n",
      "Epoch 33/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5400 - loss: 1.2278 - val_accuracy: 0.7741 - val_loss: 0.7651\n",
      "Epoch 34/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5342 - loss: 1.1886 - val_accuracy: 0.6771 - val_loss: 0.8530\n",
      "Epoch 35/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5240 - loss: 1.3138 - val_accuracy: 0.8082 - val_loss: 0.7204\n",
      "Epoch 36/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5350 - loss: 1.2523 - val_accuracy: 0.6307 - val_loss: 0.9432\n",
      "Epoch 37/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5428 - loss: 1.1876 - val_accuracy: 0.7012 - val_loss: 0.7488\n",
      "Epoch 38/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5235 - loss: 1.3346 - val_accuracy: 0.7277 - val_loss: 0.8397\n",
      "Epoch 39/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5261 - loss: 1.2673 - val_accuracy: 0.7580 - val_loss: 0.7420\n",
      "Epoch 40/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5219 - loss: 1.4120 - val_accuracy: 0.6293 - val_loss: 0.8585\n",
      "Epoch 41/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5329 - loss: 1.2965 - val_accuracy: 0.7140 - val_loss: 0.7557\n",
      "Epoch 42/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5404 - loss: 1.2461 - val_accuracy: 0.7150 - val_loss: 0.8272\n",
      "Epoch 43/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5345 - loss: 1.2115 - val_accuracy: 0.5904 - val_loss: 1.0277\n",
      "Epoch 44/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5413 - loss: 1.2635 - val_accuracy: 0.6283 - val_loss: 0.8125\n",
      "Epoch 45/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5381 - loss: 1.3148 - val_accuracy: 0.6293 - val_loss: 0.8961\n",
      "Epoch 46/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5275 - loss: 1.3586 - val_accuracy: 0.5303 - val_loss: 0.8951\n",
      "Epoch 47/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5263 - loss: 1.3225 - val_accuracy: 0.7424 - val_loss: 0.7075\n",
      "Epoch 48/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5389 - loss: 1.2282 - val_accuracy: 0.7756 - val_loss: 0.7999\n",
      "Epoch 49/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5361 - loss: 1.2159 - val_accuracy: 0.7178 - val_loss: 0.7480\n",
      "Epoch 50/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5403 - loss: 1.2919 - val_accuracy: 0.5312 - val_loss: 0.9441\n",
      "Epoch 51/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5406 - loss: 1.1982 - val_accuracy: 0.6866 - val_loss: 0.7159\n",
      "Epoch 52/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.5389 - loss: 1.2947 - val_accuracy: 0.7121 - val_loss: 0.7120\n",
      "Epoch 53/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5393 - loss: 1.2632 - val_accuracy: 0.7102 - val_loss: 0.7724\n",
      "Epoch 54/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5344 - loss: 1.2951 - val_accuracy: 0.5511 - val_loss: 1.0808\n",
      "Epoch 55/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5486 - loss: 1.2127 - val_accuracy: 0.6132 - val_loss: 0.9248\n",
      "Epoch 56/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.5329 - loss: 1.2953 - val_accuracy: 0.7050 - val_loss: 0.8606\n",
      "Epoch 57/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.5363 - loss: 1.3417 - val_accuracy: 0.5805 - val_loss: 1.0926\n",
      "Epoch 58/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.5429 - loss: 1.2456 - val_accuracy: 0.6785 - val_loss: 0.8598\n",
      "Epoch 59/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.5517 - loss: 1.1507 - val_accuracy: 0.4062 - val_loss: 1.2235\n",
      "Epoch 60/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5225 - loss: 1.3449 - val_accuracy: 0.6823 - val_loss: 0.8755\n",
      "Epoch 61/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5390 - loss: 1.2584 - val_accuracy: 0.7543 - val_loss: 0.7093\n",
      "Epoch 62/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5526 - loss: 1.2085 - val_accuracy: 0.6790 - val_loss: 1.0857\n",
      "Epoch 63/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5279 - loss: 1.4684 - val_accuracy: 0.6349 - val_loss: 0.9043\n",
      "Epoch 64/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5531 - loss: 1.2354 - val_accuracy: 0.5251 - val_loss: 0.9704\n",
      "Epoch 65/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5340 - loss: 1.3360 - val_accuracy: 0.5705 - val_loss: 0.9589\n",
      "Epoch 66/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5276 - loss: 1.2918 - val_accuracy: 0.6828 - val_loss: 0.8096\n",
      "Epoch 67/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5447 - loss: 1.1765 - val_accuracy: 0.6548 - val_loss: 0.8394\n",
      "Epoch 68/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5501 - loss: 1.2245 - val_accuracy: 0.3944 - val_loss: 1.2162\n",
      "Epoch 69/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5369 - loss: 1.2455 - val_accuracy: 0.4134 - val_loss: 1.1367\n",
      "Epoch 70/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5540 - loss: 1.2209 - val_accuracy: 0.7211 - val_loss: 0.7080\n",
      "Epoch 71/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5390 - loss: 1.2598 - val_accuracy: 0.6709 - val_loss: 0.8176\n",
      "Epoch 72/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.5304 - loss: 1.3278 - val_accuracy: 0.4986 - val_loss: 1.0139\n",
      "Epoch 73/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5348 - loss: 1.2644 - val_accuracy: 0.6610 - val_loss: 0.9596\n",
      "Epoch 74/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5342 - loss: 1.3179 - val_accuracy: 0.7031 - val_loss: 0.8339\n",
      "Epoch 75/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5429 - loss: 1.2641 - val_accuracy: 0.5232 - val_loss: 0.9301\n",
      "Epoch 76/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5535 - loss: 1.2396 - val_accuracy: 0.6359 - val_loss: 0.9076\n",
      "Epoch 77/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5554 - loss: 1.2035 - val_accuracy: 0.6766 - val_loss: 0.8192\n",
      "Epoch 78/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5465 - loss: 1.2224 - val_accuracy: 0.4820 - val_loss: 0.9773\n",
      "Epoch 79/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5495 - loss: 1.2182 - val_accuracy: 0.6046 - val_loss: 0.8638\n",
      "Epoch 80/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5524 - loss: 1.2361 - val_accuracy: 0.7405 - val_loss: 0.7298\n",
      "Epoch 81/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5524 - loss: 1.2222 - val_accuracy: 0.4437 - val_loss: 1.1355\n",
      "Epoch 82/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5581 - loss: 1.2496 - val_accuracy: 0.6894 - val_loss: 0.9340\n",
      "Epoch 83/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5528 - loss: 1.2339 - val_accuracy: 0.6042 - val_loss: 1.0441\n",
      "Epoch 84/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5534 - loss: 1.1727 - val_accuracy: 0.5076 - val_loss: 1.0309\n",
      "Epoch 85/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5521 - loss: 1.2428 - val_accuracy: 0.7027 - val_loss: 0.7091\n",
      "Epoch 86/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5529 - loss: 1.2040 - val_accuracy: 0.6562 - val_loss: 0.8833\n",
      "Epoch 87/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5462 - loss: 1.2833 - val_accuracy: 0.6534 - val_loss: 0.8574\n",
      "Epoch 88/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5589 - loss: 1.1860 - val_accuracy: 0.6402 - val_loss: 0.8567\n",
      "Epoch 89/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5621 - loss: 1.1501 - val_accuracy: 0.5857 - val_loss: 0.9234\n",
      "Epoch 90/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5286 - loss: 1.3716 - val_accuracy: 0.7031 - val_loss: 0.7910\n",
      "Epoch 91/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5596 - loss: 1.1944 - val_accuracy: 0.7453 - val_loss: 0.7032\n",
      "Epoch 92/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.5532 - loss: 1.1899 - val_accuracy: 0.6993 - val_loss: 0.8353\n",
      "Epoch 93/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5386 - loss: 1.2667 - val_accuracy: 0.6402 - val_loss: 0.8933\n",
      "Epoch 94/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5365 - loss: 1.3189 - val_accuracy: 0.8438 - val_loss: 0.6846\n",
      "Epoch 95/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5539 - loss: 1.1910 - val_accuracy: 0.6487 - val_loss: 0.8950\n",
      "Epoch 96/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5540 - loss: 1.2159 - val_accuracy: 0.6562 - val_loss: 0.8145\n",
      "Epoch 97/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5407 - loss: 1.2411 - val_accuracy: 0.6179 - val_loss: 0.8545\n",
      "Epoch 98/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.5549 - loss: 1.2117 - val_accuracy: 0.7770 - val_loss: 0.7433\n",
      "Epoch 99/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.5581 - loss: 1.1658 - val_accuracy: 0.3864 - val_loss: 1.4425\n",
      "Epoch 100/100\n",
      "\u001b[1m264/264\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.5460 - loss: 1.2821 - val_accuracy: 0.7680 - val_loss: 0.7142\n"
     ]
    }
   ],
   "source": [
    "history=model.fit(X_train, y_train_encoded, epochs=100, validation_split=0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "9bbe9871",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-03T20:12:02.217809Z",
     "iopub.status.busy": "2024-09-03T20:12:02.217280Z",
     "iopub.status.idle": "2024-09-03T20:12:02.519482Z",
     "shell.execute_reply": "2024-09-03T20:12:02.517992Z"
    },
    "papermill": {
     "duration": 0.414276,
     "end_time": "2024-09-03T20:12:02.522919",
     "exception": false,
     "start_time": "2024-09-03T20:12:02.108643",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m83/83\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step\n"
     ]
    }
   ],
   "source": [
    "y_prob=model.predict(X_test_scaled)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "6f7a9c0f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-03T20:12:02.738169Z",
     "iopub.status.busy": "2024-09-03T20:12:02.737579Z",
     "iopub.status.idle": "2024-09-03T20:12:02.744343Z",
     "shell.execute_reply": "2024-09-03T20:12:02.743047Z"
    },
    "papermill": {
     "duration": 0.118704,
     "end_time": "2024-09-03T20:12:02.746974",
     "exception": false,
     "start_time": "2024-09-03T20:12:02.628270",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "y_pred=y_prob.argmax(axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "5ed22482",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-03T20:12:02.961811Z",
     "iopub.status.busy": "2024-09-03T20:12:02.960589Z",
     "iopub.status.idle": "2024-09-03T20:12:02.970860Z",
     "shell.execute_reply": "2024-09-03T20:12:02.969685Z"
    },
    "papermill": {
     "duration": 0.121374,
     "end_time": "2024-09-03T20:12:02.973377",
     "exception": false,
     "start_time": "2024-09-03T20:12:02.852003",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.4481060606060606"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy_score(y_test_encoded,y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "b4e23d1d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-03T20:12:03.184790Z",
     "iopub.status.busy": "2024-09-03T20:12:03.184307Z",
     "iopub.status.idle": "2024-09-03T20:12:03.195288Z",
     "shell.execute_reply": "2024-09-03T20:12:03.194006Z"
    },
    "papermill": {
     "duration": 0.120518,
     "end_time": "2024-09-03T20:12:03.197957",
     "exception": false,
     "start_time": "2024-09-03T20:12:03.077439",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[270,   0, 229, 181],\n",
       "       [300,   0, 231, 147],\n",
       "       [ 21,   0, 612,  27],\n",
       "       [136,   0, 185, 301]])"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "confusion_matrix(y_test_encoded, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "ce3224e9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-03T20:12:03.407659Z",
     "iopub.status.busy": "2024-09-03T20:12:03.407188Z",
     "iopub.status.idle": "2024-09-03T20:12:03.729300Z",
     "shell.execute_reply": "2024-09-03T20:12:03.728023Z"
    },
    "papermill": {
     "duration": 0.430614,
     "end_time": "2024-09-03T20:12:03.732372",
     "exception": false,
     "start_time": "2024-09-03T20:12:03.301758",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7935157857e0>]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(history.history['loss'])\n",
    "plt.plot(history.history['val_loss'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "521b253e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-03T20:12:04.035503Z",
     "iopub.status.busy": "2024-09-03T20:12:04.034908Z",
     "iopub.status.idle": "2024-09-03T20:12:04.328988Z",
     "shell.execute_reply": "2024-09-03T20:12:04.327571Z"
    },
    "papermill": {
     "duration": 0.495264,
     "end_time": "2024-09-03T20:12:04.332425",
     "exception": false,
     "start_time": "2024-09-03T20:12:03.837161",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x793514e4e470>]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(history.history['accuracy'])\n",
    "plt.plot(history.history['val_accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1bc97024",
   "metadata": {
    "papermill": {
     "duration": 0.107686,
     "end_time": "2024-09-03T20:12:04.548327",
     "exception": false,
     "start_time": "2024-09-03T20:12:04.440641",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 5268544,
     "sourceId": 8767723,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30761,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 78.66518,
   "end_time": "2024-09-03T20:12:08.101887",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-09-03T20:10:49.436707",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
